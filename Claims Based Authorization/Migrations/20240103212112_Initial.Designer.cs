// <auto-generated />
using System;
using Claims_Based_Authorization.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Claims_Based_Authorization.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20240103212112_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b96a4ff1-c4ec-40e6-9496-d45fd45085c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acad1191-e379-4f01-b084-a5ec40810ffe",
                            Email = "Admin1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@ABC.COM",
                            NormalizedUserName = "ADMIN1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHy4mONEsFUoLRGpeJd39ZAc/MDVJboaK4+hzC6qUVxo4o96qr3014cYwSPZDxP8vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c854eb0-515c-44a3-883c-2c6cdbdcbe64",
                            TwoFactorEnabled = false,
                            UserName = "Admin1@abc.com"
                        },
                        new
                        {
                            Id = "b6798a21-75db-46c5-b696-b47387c450f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bddc184-a6a7-44b5-ba6a-a85122063367",
                            Email = "HR1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HR1@ABC.COM",
                            NormalizedUserName = "HR1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7Dmv6EPDHw/dq/Ndi8qzpli/pWcOe9UdXzUMKyD8gNjlEGQ2d1lgEmDuVkcNFgmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfb448f9-304a-4759-9f18-0ea71a893927",
                            TwoFactorEnabled = false,
                            UserName = "HR1@abc.com"
                        },
                        new
                        {
                            Id = "b7f46612-41d2-47ba-af30-f957a680d92a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "663c1e96-9acb-433a-ae06-bddd27279f42",
                            Email = "Ibrahim@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IBRAHIM@EXAMPLE.COM",
                            NormalizedUserName = "IBRAHIM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI3a8AxinUQP2JihOdPoruk/wCKFPH9RNtt8fiSSAExk2FDvLmEdLY6d+t+SiD3GDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e12089a9-dd49-40af-8a32-271230da465d",
                            TwoFactorEnabled = false,
                            UserName = "Ibrahim@example.com"
                        },
                        new
                        {
                            Id = "0442b285-375d-48a0-8f47-d6e21bf342c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f0b8a81-673d-4742-91d6-6e06371dfba0",
                            Email = "Sajib@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAJIB@EXAMPLE.COM",
                            NormalizedUserName = "SAJIB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAdL8J8rbiWZynEimj2j54tdL3Kbl19ghsLPWanrWomPWJTMvqB91cllCGFweIyrqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de378ce0-9b2f-4657-a35f-07c93dbe0678",
                            TwoFactorEnabled = false,
                            UserName = "Sajib@example.com"
                        },
                        new
                        {
                            Id = "176429b6-a988-40f6-825a-d1eed4e0eeb5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "265e0976-15aa-43cc-92aa-d8a1526a3046",
                            Email = "Male1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MALE1@ABC.COM",
                            NormalizedUserName = "MALE1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUs0kvAc5VznVbBouxjsEtZyyQKWT0wR5T7m/odO6bL9b0WWDP8EOJUGlLo//MNYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52656863-4073-4bac-a5e0-c23aea1f6bc6",
                            TwoFactorEnabled = false,
                            UserName = "Male1@abc.com"
                        },
                        new
                        {
                            Id = "fc6937ab-d96b-4c2e-88a2-3de1afd319a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cddcfc17-6359-49ab-b83a-f369adefd278",
                            Email = "Female1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FEMALE1@ABC.COM",
                            NormalizedUserName = "FEMALE1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCXpoxPnZuukfLTyLi1GyXFoaV7nedDmnDiPp+2yU1sS9g/3JkC5OsTENKipCnphQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05f4e225-17a6-42a5-a5d3-63e9e78489fa",
                            TwoFactorEnabled = false,
                            UserName = "Female1@abc.com"
                        },
                        new
                        {
                            Id = "01cf226c-9a88-4109-bd93-af54a6d53964",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f415d01-90b8-49e5-a810-1428103731d0",
                            Email = "Bangladeshi1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BANGLADESHI1@ABC.COM",
                            NormalizedUserName = "BANGLADESHI1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJjxBh4daV3wJwXSN4vg4eGNk5J2cwOfOBQ9xhkblowWjIxm4PhJzLNgEkjHFta3MA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24b2b9e3-4a23-4a3b-81ef-94900a325d1c",
                            TwoFactorEnabled = false,
                            UserName = "Bangladeshi1@abc.com"
                        },
                        new
                        {
                            Id = "620b2b39-426e-42e1-8ca8-82551f11acc0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4a5a25b-046e-4cb2-8d50-806da3b1129e",
                            Email = "Japanese1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAPANESE1@ABC.COM",
                            NormalizedUserName = "JAPANESE1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFxRHDCvQpTZrgPBSDHazxxrL7KdR/qukGAh+bRFcVsexB+gFVtntV4Mwo+f9EeyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7791b10-83d9-4b29-a857-fd88f22f04a0",
                            TwoFactorEnabled = false,
                            UserName = "Japanese1@abc.com"
                        },
                        new
                        {
                            Id = "75293121-df2d-4e4b-abf1-a1ef0e7e4d0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c297f4dd-b233-4c0f-839b-c137f5928c64",
                            Email = "Australians1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AUSTRALIANS1@ABC.COM",
                            NormalizedUserName = "AUSTRALIANS1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEQ1/jvU4HoXR1iuBq5RafHjkacQNjwhRJc2yjUbVzOpLus8jkaH2vRcCl2+sZqpOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62f55f7a-7bb4-472c-8055-8693fb6ef5c3",
                            TwoFactorEnabled = false,
                            UserName = "Australians1@abc.com"
                        },
                        new
                        {
                            Id = "9702702f-df96-44e0-aad8-0222b618ed8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c652a26a-bae4-4f79-82c1-405221b84b23",
                            Email = "Canadian1@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CANADIAN1@ABC.COM",
                            NormalizedUserName = "CANADIAN1@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP046aQw5wmcVTi9zjyQfwJH9eWg/LVoEmvJDwV0BUFhMmYWGqeqP5Ze9FaHAZA0nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ff005d0-95e7-49cc-8e0f-55b285329a7f",
                            TwoFactorEnabled = false,
                            UserName = "Canadian1@abc.com"
                        },
                        new
                        {
                            Id = "c02f71c8-a822-4b3a-900c-5c62478b32f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e21b4a01-ec93-4846-9411-d01135ac7c6c",
                            Email = "Admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELrk1C/NeyKzFcxY4w+wz3hArbxMlXs1m1+N9XFYv3mMO7d3uKaZr0yi3ztL52fVaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25ed73cb-6fae-43ec-9df8-ea41e930c3c2",
                            TwoFactorEnabled = false,
                            UserName = "Admin1@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Role",
                            ClaimValue = "Admin",
                            UserId = "b96a4ff1-c4ec-40e6-9496-d45fd45085c1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Role",
                            ClaimValue = "HR",
                            UserId = "b6798a21-75db-46c5-b696-b47387c450f0"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Role",
                            ClaimValue = "Admin",
                            UserId = "b7f46612-41d2-47ba-af30-f957a680d92a"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Role",
                            ClaimValue = "Admin",
                            UserId = "0442b285-375d-48a0-8f47-d6e21bf342c9"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Gender",
                            ClaimValue = "Male",
                            UserId = "176429b6-a988-40f6-825a-d1eed4e0eeb5"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Gender",
                            ClaimValue = "Female",
                            UserId = "fc6937ab-d96b-4c2e-88a2-3de1afd319a1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Country",
                            ClaimValue = "Bangladesh",
                            UserId = "01cf226c-9a88-4109-bd93-af54a6d53964"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Country",
                            ClaimValue = "Japan",
                            UserId = "620b2b39-426e-42e1-8ca8-82551f11acc0"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Country",
                            ClaimValue = "Australia",
                            UserId = "75293121-df2d-4e4b-abf1-a1ef0e7e4d0b"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Country",
                            ClaimValue = "Canada",
                            UserId = "9702702f-df96-44e0-aad8-0222b618ed8f"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Role",
                            ClaimValue = "Admin",
                            UserId = "c02f71c8-a822-4b3a-900c-5c62478b32f0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
